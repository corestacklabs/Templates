{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Creates a new IAM role for your AWS Master account with ReadOnlyAccess permissions needed for CloudOps Bundle",
	"Parameters": {
		"RoleName": {
			"Type": "String",
			"Description": "The name of the IAM role to create. Use alphanumeric and '+=,.@-_' characters.",
			"AllowedPattern": "[\\w+=,.@-]{1,64}",
			"MinLength": "1",
			"MaxLength": "64"
		},
		"ExternalId": {
			"Type": "String",
			"Description": "The external ID can be any word or number that is agreed upon between you and the third-party (Corestack - 028811834831) account.",
			"MinLength": "1",
			"MaxLength": "64"
		},
		"EnforceMFA": {
			"Description": "Flag to enforce MFA (Multi-Factor Authentication) when Assuming the role.",
			"Type": "String",
			"Default": "false",
			"AllowedValues": [
				"true",
				"false"
			]
		},
		"CoreStackAccountId": {
			"Type": "String",
			"Description": "The AWS Account ID of Corestack.",
			"Default": "028811834831"
		}
	},
	"Conditions": {
		"IncludeMFACondition": {
			"Fn::Equals": [{
					"Ref": "EnforceMFA"
				},
				"true"
			]
		}
	},
	"Resources": {
		"Role": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": {
					"Ref": "RoleName"
				},
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"AWS": {
								"Fn::Join": [
									"",
									[
										"arn:aws:iam::",
										{
											"Ref": "CoreStackAccountId"
										},
										":root"
									]
								]
							}
						},
						"Condition": {
							"Fn::If": [
								"IncludeMFACondition",
								{
									"StringEquals": {
										"sts:ExternalId": {
											"Ref": "ExternalId"
										}
									},
									"Bool": {
										"aws:MultiFactorAuthPresent": "true"
									}
								},
								{
									"StringEquals": {
										"sts:ExternalId": {
											"Ref": "ExternalId"
										}
									}
								}
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
			"Tags": [
          {
            "Key": "Purpose",
            "Value": "CoreStack"
          }
        ]

			}
		},
		"InventoryCloudopsPolicy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "CoreStack_InventoryCloudopsPolicy",
				"PolicyDocument": {
					"Statement": [{
						"Sid": "Auth",
						"Action": [
							"access-analyzer:List*",
							"acm:DescribeCertificate",
							"acm:GetCertificate",
							"acm:ListCertificates",
							"acm:ListTagsForCertificate",
							"apigateway:GET",
							"application-autoscaling:DescribeScheduledActions",
							"autoscaling:Describe*",
							"batch:Describe*",
							"clouddirectory:DescribeDirectories",
							"clouddirectory:GetDirectory",
							"clouddirectory:ListDirectories",
							"cloudformation:DescribeStacks",
							"cloudformation:GetStackPolicy",
							"cloudformation:GetTemplate",
							"cloudformation:ListStackResources",
							"cloudformation:ListStacks",
							"cloudfront:Get*",
							"cloudfront:List*",
							"cloudhsm:Describe*",
							"cloudhsm:List*",
							"cloudtrail:DescribeTrails",
							"cloudtrail:Get*",
							"cloudtrail:ListTrails",
							"cloudwatch:Describe*",
							"cloudwatch:GetDashboard",
							"cloudwatch:GetMetricData",
							"cloudwatch:ListDashboards",
							"codeartifact:DescribeDomain",
							"codepipeline:List",
							"cognito-identity:Describe*",
							"cognito-identity:Get*",
							"cognito-user:Describe*",
							"cognito-user:List*",
							"datapipeline:DescribePipelines",
							"datapipeline:GetPipelineDefinition",
							"datapipeline:ListPipelines",
							"directconnect:DescribeConnections",
							"directconnect:DescribeLocations",
							"directconnect:DescribeVirtualGateways",
							"directconnect:DescribeVirtualInterfaces",
							"dms:Describe*",
							"dynamodb:Describe*",
							"dynamodb:ListTables",
							"dynamodb:ListTagsOfResource",
							"ec2:Describe*",
							"ecr:BatchGetImage",
							"ecr:BatchImportUpstreamImage",
							"ecr:DescribeRepositories",
							"ecr:GetLifecyclePolicy",
							"ecr:GetLifecyclePolicyPreview",
							"ecr-public:GetRepositoryCatalogData",
							"ecs:Describe*",
							"ecs:List*",
							"eks:Describe*",
							"eks:List*",
							"elasticache:Describe*",
							"elasticbeanstalk:Describe*",
							"elasticfilesystem:Describe*",
							"elasticloadbalancing:Describe*",
							"elasticmapreduce:Describe*",
							"elasticmapreduce:List*",
							"es:Describe*",
							"es:ListDomainNames",
							"glacier:Describe*",
							"glacier:List*",
							"glue:Get*",
							"glue:List*",
							"guardduty:GetDetector",
							"guardduty:ListDetectors",
							"iam:GetGroup",
							"iam:GetGroupPolicy",
							"iam:GetRolePolicy",
							"iam:GetUser",
							"iam:GetUserPolicy",
							"iam:List*",
							"iam:SimulatePrincipalPolicy",
							"inspector:Describe*",
							"inspector:List*",
							"iot:DescribeThing",
							"iot:ListThings",
							"kafka:Describe*",
							"kafka:List*",
							"kinesis:DescribeStream",
							"kinesis:GetShardIterator",
							"kinesis:ListStreams",
							"kinesis:ListTagsForStream",
							"kms:Describe*",
							"kms:Get*",
							"kms:List*",
							"lambda:Get*",
							"lambda:List*",
							"lightsail:Get*",
							"logs:DescribeLogGroups",
							"logs:DescribeLogStreams",
							"logs:GetLogEvents",
							"mgh:DescribeApplicationState",
							"mgh:ListApplicationStates",
							"mq:DescribeBroker",
							"mq:ListBrokers",
							"opsworks:DescribeStacks",
							"opsworks:DescribeStackSummary",
							"opsworks:DescribeUserProfiles",
							"organizations:Describe*",
							"organizations:List*",
							"qldb:DescribeLedger",
							"quicksight:Describe*",
							"quicksight:List*",
							"rds:Describe*",
							"rds:List*",
							"redshift:Describe*",
							"route53:GetTrafficPolicy",
							"route53:GetTrafficPolicyInstance",
							"route53:List*",
							"s3:GetAccountPublicAccessBlock",
							"s3:GetBucketACL",
							"s3:GetBucketPolicy",
							"s3:GetBucketPublicAccessBlock",
							"s3:GetLifecycleConfiguration",
							"s3:GetNotificationConfiguration",
							"s3:ListAllMyBuckets",
							"s3:ListBucket",
							"sdb:DomainMetadata",
							"sdb:ListDomains",
							"secretsmanager:Describe*",
							"secretsmanager:List*",
							"servicecatalog:Describe*",
							"servicecatalog:List*",
							"sheild:DescribeProtection",
							"sheild:ListProtections",
							"sns:GetSnsTopic",
							"sns:GetSubscriptionAttributes",
							"sns:GetTopicAttributes",
							"sns:ListSubscriptionsByTopic",
							"sns:ListTopics",
							"sqs:GetQueueAttributes",
							"sqs:ListQueues",
							"ssm:Describe*",
							"ssm:Get*",
							"ssm:List*",
							"storagegateway:Describe*",
							"storagegateway:List*",
							"swf:List*",
							"waf:Get*",
							"waf:List*",
							"waf-regional:Get*",
							"waf-regional:List*",
							"wafv2:Get*",
							"wafv2:List*",
							"workmail:Describe*",
							"workmail:List*",
							"workspaces:Describe*"
						],
						"Effect": "Allow",
						"Resource": "*"
					}]
				},
				"Roles": [{
					"Ref": "Role"
				}]
			}
		},
		"ActivityPolicy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "CoreStack_ActivityPolicy",
				"PolicyDocument": {
					"Statement": [{
						"Sid": "Auth",
						"Action": [
							"cloudtrail:DescribeTrails",
							"cloudtrail:GetTrailStatus",
							"cloudtrail:ListTags",
							"iam:GetPolicy",
							"iam:GetPolicyVersion",
							"iam:GetRole",
							"iam:ListAttachedRolePolicies",
							"iam:ListPolicyVersions",
							"iam:ListRolePolicies",
							"iam:ListRoles",
							"s3:GetBucketLocation",
							"s3:GetBucketTagging",
							"s3:HeadBucket",
							"s3:ListObjects"
						],
						"Effect": "Allow",
						"Resource": "*"
					}]
				},
				"Roles": [{
					"Ref": "Role"
				}]
			}
		},
		"AlertPolicy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "CoreStack_AlertPolicy",
				"PolicyDocument": {
					"Statement": [{
						"Sid": "Auth",
						"Action": [
							"cloudwatch:DescribeAlarms",
							"cloudwatch:GetMetricStatistics",
							"cloudwatch:ListMetrics"
						],
						"Effect": "Allow",
						"Resource": "*"
					}]
				},
				"Roles": [{
					"Ref": "Role"
				}]
			}
		}
	},
	"Outputs": {
		"RoleARN": {
			"Description": "ARN of the IAM Role.",
			"Value": {
				"Fn::GetAtt": [
					"Role",
					"Arn"
				]
			}
		},
		"ExternalId": {
			"Description": "ExternalId used in Role trusted policy.",
			"Value": {
				"Ref": "ExternalId"
			}
		},
		"MFAEnabled": {
			"Description": "Flag to identify MFA enforced for the role or not.",
			"Value": {
				"Ref": "EnforceMFA"
			}
		}
	}
}